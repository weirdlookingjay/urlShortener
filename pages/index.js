import Head from "next/head";
import { useState, useEffect } from "react";
import axios from "axios";
import { decode, encode } from "base-64";

if (!global.btoa) {
  global.btoa = encode;
}

if (!global.atob) {
  global.atob = decode;
}

export default function Home() {
  let [longUrl, setLongUrl] = useState("");
  let [links, setLinks] = useState({});

  const onCreate = async (e) => {
    e.preventDefault();
    console.log(`Make this short: ${longUrl}`);

    const result = await axios.post("/api/shorten", { longUrl });
    console.log(result);

    setLongUrl("");

    await refreshLinks();
  };

  const getLinks = async () => {
    const response = await axios.get("/api/links");
    return response.data.links;
  };

  const refreshLinks = async () => {
    const linkObjects = await getLinks();
    setLinks(linkObjects);
  };

  const onShortUrlClick = (shortUrl) => {
    const url = `http://localhost:3000/go/${shortUrl}`;
    navigator.clipboard.writeText(url).then(
      () => {
        console.log("Copied link to the clipboard");
      },
      () => {
        alert("Could not copy the link to clipboard");
      }
    );
  };

  useEffect(() => {
    (async () => {
      await refreshLinks();
    })();
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={styles.container}>
        <h1 style={styles.h1}>URL Shortener</h1>
        <input
          type="text"
          onChange={(e) => setLongUrl(e.target.value)}
          value={longUrl}
          placeholder="Enter Long URL"
          style={styles.textInput}
        />
        <button onClick={onCreate} style={styles.saveButton}>
          Make it Short
        </button>
      </div>
      <table style={styles.table}>
        <thead>
          <tr>
            <td style={styles.tableHeader}>Short URL</td>
            <td style={styles.tableHeader}>Original URL</td>
          </tr>
        </thead>
        <tbody>
          {Object.keys(links).map((short) => {
            // links is form of {shortUrl: longUrl} so the shortUrl is the key
            const long = links[short];
            return (
              <tr key={short}>
                <td
                  onClick={() => onShortUrlClick(short)}
                  style={styles.tableShortCell}
                >{`http://localhost:3000/go/${short}`}</td>
                <td>{long}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

const styles = {
  h1: {
    textTransform: "uppercase",
  },
  container: {
    maxWidth: "600px",
    margin: "0 auto",
  },
  textInput: {
    width: "100%",
    padding: "8px 5px",
    fontSize: "1.2em",
  },
  saveButton: {
    padding: "10px 5px",
    width: "100%",
    margin: "5px 0 0 0",
    fontSize: "1.2em",
  },
  table: {
    width: "100%",
    margin: "30px 0 0 0",
  },
  tableHeader: {
    fontWeight: "bold",
  },
  tableShortCell: {
    padding: "5px 20px 5px 0",
    width: "50%",
    cursor: "pointer",
  },
};
